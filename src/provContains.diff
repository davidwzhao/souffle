diff --git a/src/CompiledIndexUtils.h b/src/CompiledIndexUtils.h
index 8d03ddf3..04ed8448 100644
--- a/src/CompiledIndexUtils.h
+++ b/src/CompiledIndexUtils.h
@@ -638,6 +638,22 @@ public:
                 index.upper_bound(raise<Index, SubIndex>(key), hints));
     }
 
+    bool provContains(const key_type& key, operation_hints& hints) const {
+        // compute lower and upper bounds
+        auto lower = index.lower_bound(key, hints);
+
+        if (lower != index.end()) {
+            for (size_t i = 0; i < key_type::arity - 2; i++) {
+                if (key[i] != *lower[i]) {
+                    return false;
+                }
+            }
+            return *lower[key_type::arity - 1] <= key[key_type::arity - 1];
+        } else {
+            return false;
+        }
+    }
+
     iterator begin() const {
         return index.begin();
     }
diff --git a/src/Synthesiser.cpp b/src/Synthesiser.cpp
index bfaeff76..bcf544ac 100644
--- a/src/Synthesiser.cpp
+++ b/src/Synthesiser.cpp
@@ -1321,10 +1321,12 @@ void Synthesiser::emitCode(std::ostream& out, const RamStatement& stmt) {
 
             // provenance not exists is never total, conduct a range query
             out << "[&]() -> bool {\n";
-            out << "auto existenceCheck = " << relName << "->"
+            out << "auto existenceCheck = " << relName << "->provContains"
+                /*
                 << "equalRange";
             // out << synthesiser.toIndex(ne.getSearchSignature());
             out << "_" << isa->getSearchSignature(&provExists);
+            */
             out << "(Tuple<RamDomain," << arity << ">({{";
             for (size_t i = 0; i < provExists.getValues().size() - 1; i++) {
                 RamExpression* val = provExists.getValues()[i];
diff --git a/src/SynthesiserRelation.cpp b/src/SynthesiserRelation.cpp
index db1af8a5..2e5527d2 100644
--- a/src/SynthesiserRelation.cpp
+++ b/src/SynthesiserRelation.cpp
@@ -334,6 +334,10 @@ void SynthesiserDirectRelation::generateTypeStruct(std::ostream& out) {
         out << "}\n";
     }
 
+    out << "bool provContains(const t_tuple& t, context& h) const {\n";
+    out << "ind_" << masterIndex << ".provContains(t, h);\n";
+    out << "}\n";
+
     // empty method
     out << "bool empty() const {\n";
     out << "return ind_" << masterIndex << ".empty();\n";
diff --git a/src/main.cpp b/src/main.cpp
index 6771bb8c..6aa719d5 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -507,7 +507,7 @@ int main(int argc, char** argv) {
                     std::make_unique<RamTransformerSequence>(std::make_unique<ExpandFilterTransformer>(),
                             std::make_unique<HoistConditionsTransformer>(),
                             std::make_unique<MakeIndexTransformer>())),
-            std::make_unique<IfConversionTransformer>(), std::make_unique<ChoiceConversionTransformer>(),
+            /* std::make_unique<IfConversionTransformer>(),*/ std::make_unique<ChoiceConversionTransformer>(),
             std::make_unique<CollapseFiltersTransformer>(), std::make_unique<TupleIdTransformer>(),
             std::make_unique<RamLoopTransformer>(std::make_unique<RamTransformerSequence>(
                     std::make_unique<HoistAggregateTransformer>(), std::make_unique<TupleIdTransformer>())),
